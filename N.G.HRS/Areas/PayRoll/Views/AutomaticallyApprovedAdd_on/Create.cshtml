@model N.G.HRS.Areas.PayRoll.Models.AutomaticallyApprovedAdd_on
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Create";
    Layout = "_Layout";

}

<h1>Create</h1>

<h4>AutomaticallyApprovedAdd_on</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SectionsId" class="control-label"></label>
                <select asp-for="SectionsId" class="js-example-basic-single form-select" asp-items="ViewBag.SectionsId">
                    <option value="">   </option>

                </select>
            </div>
            <div class="form-group">
                <label asp-for="EmployeeId" class="control-label"></label>
                <select asp-for="EmployeeId" class="js-example-basic-single form-select" asp-items="ViewBag.EmployeeId">
                    <option value="">  </option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="FromDate" class="control-label"></label>
                <input asp-for="FromDate" class="form-control" />
                <span asp-validation-for="FromDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ToDate" class="control-label"></label>
                <input asp-for="ToDate" class="form-control" />
                <span asp-validation-for="ToDate" class="text-danger"></span>
            </div>
            <div id="startTimeInput" class="form-group">
                <label asp-for="FromTime" class="control-label"></label>
                <input asp-for="FromTime" id="startTime" class="form-control" />
                <span asp-validation-for="FromTime" class="text-danger"></span>
            </div>
            <div id="endTimeInput" class="form-group">
                <label asp-for="ToTime" class="control-label"></label>
                <input asp-for="ToTime" id="endTime" class="form-control" />
                <span asp-validation-for="ToTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Hours" class="control-label"></label>
                <input asp-for="Hours" id="hours" readonly class="form-control" />
                <span asp-validation-for="Hours" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Minutes" class="control-label"></label>
                <input asp-for="Minutes" id="minutes" readonly class="form-control" />
                <span asp-validation-for="Minutes" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" id="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
@* ========================================================= *@
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script>

    function calculateTimeDifference() {
        const startTimeInput = document.getElementById("startTime");
        const endTimeInput = document.getElementById("endTime");
        const hoursInput = document.getElementById("hours");
        const minutesInput = document.getElementById("minutes");

        if (!startTimeInput || !endTimeInput || !hoursInput || !minutesInput) {
            console.error("Missing input elements: startTime, endTime, hours, or minutes");
            return;
        }

        const startTime = startTimeInput.value.trim();
        const endTime = endTimeInput.value.trim();

        if (!startTime || !endTime) {
            console.error("Please enter both start and end times");
            return;
        }
        if (startTime > endTime) {
            alert(`وقت البدأ ${startTime} يجب ان يكون قبل تاريخ النهاية${endTime}`);
            return;
        }

        // Validate time format (optional)
        // You can add a regular expression or a library to validate time format (HH:MM)

        // Parse string times into Date objects
        const startDate = new Date(`1970-01-01T${startTime}:00`);
        const endDate = new Date(`1970-01-01T${endTime}:00`);

        // Calculate time difference in milliseconds
        const timeDiff = endDate.getTime() - startDate.getTime();

        // Calculate hours and minutes
        const hours = Math.floor(timeDiff / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        if (minutes == 0) {
            hoursInput.value = hours;
        }
        // Update hours and minutes input fields
        hoursInput.value = (hours + ":" + minutes);
        minutesInput.value = hours * 60 + minutes; // Ensure two-digit format
    }

    // Add event listener to a button or on change event of time inputs
    const calculateButton = document.getElementById("calculateButton");
    const startTimeInput = document.getElementById("startTime");
    const endTimeInput = document.getElementById("endTime");

    if (calculateButton) {
        calculateButton.addEventListener("click", calculateTimeDifference);
    } else {
        startTimeInput.addEventListener("change", calculateTimeDifference);
        endTimeInput.addEventListener("change", calculateTimeDifference);
    }
</script>

@* =============================================== *@

<script>
    document.getElementById("submit").addEventListener("click", function (event) {
        const EmployeeId = document.getElementById("EmployeeId");
        if (EmployeeId.value === "") {
            event.preventDefault(); // Prevent form submission
            Swal.fire({
                icon: "error",
                title: "خطئ....",
                text: "رجاء أختر  الموظف",
            });
        }
    });

</script>
@* ================================================ *@
<script>
    document.getElementById("submit").addEventListener("click", function (event) {
        const SectionsId = document.getElementById("SectionsId");
        if (SectionsId.value === "") {
            event.preventDefault(); // Prevent form submission
            Swal.fire({
                icon: "error",
                title: "خطئ....",
                text: "رجاء أختر  القسم",
            });
        }
    });

</script>