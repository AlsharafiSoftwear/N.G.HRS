@model N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>PermanenceModels</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" onsubmit="return validateForm();">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="PermanenceName" class="control-label"></label>
                <input asp-for="PermanenceName" class="form-control" />
                <span asp-validation-for="PermanenceName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="FromDate" class="control-label"></label>
                <input asp-for="FromDate" class="form-control" />
                <span asp-validation-for="FromDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ToDate" class="control-label"></label>
                <input asp-for="ToDate" class="form-control" />
                <span asp-validation-for="ToDate" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" id="FlexibleWorkingHours" name="radiobutton" asp-for="FlexibleWorkingHours" /> @Html.DisplayNameFor(model => model.FlexibleWorkingHours)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" id="myCheckbox" name="radiobutton" asp-for="WorkBetweenTwoShifts" /> @Html.DisplayNameFor(model => model.WorkBetweenTwoShifts)
                </label>
            </div>
            <div class="form-group" id="nFromTime">
                <label asp-for="FromTime" id="nnFromTime" class="control-label"></label>
                <input asp-for="FromTime" class="form-control" />
                <span asp-validation-for="FromTime" class="text-danger"></span>
            </div>
            <div class="form-group" id="nToTime">
                <label asp-for="ToTime" id="nnToTime" class="control-label"></label>
                <input asp-for="ToTime" class="form-control" />
                <span asp-validation-for="ToTime" class="text-danger"></span>
            </div>
            <div class="form-group" id="nHours">
                <label asp-for="HoursOfWorks" id="nnHours" class="control-label"></label>
                <input asp-for="HoursOfWorks" readonly style="background-color: #00000005;cursor:context-menu" class="form-control" />
                <span asp-validation-for="HoursOfWorks" class="text-danger"></span>
            </div>
            @*             <div class="form-group form-check">
            <label class="form-check-label">
            <input class="form-check-input" id="AttendanceCheckbox" asp-for="AddAttendanceAndDeparturePermission" /> @Html.DisplayNameFor(model => model.AddAttendanceAndDeparturePermission)
            </label>
            </div> *@
            @*             <div class="form-group" id="earlyAttendance">
            <label asp-for="AllowanceForLateAttendance" class="control-label"></label>
            <input asp-for="AllowanceForLateAttendance" class="form-control" />
            <span asp-validation-for="AllowanceForLateAttendance" class="text-danger"></span>
            </div>
            <div class="form-group">
            <label asp-for="EarlyDeparturePermission" class="control-label"></label>
            <input asp-for="EarlyDeparturePermission" class="form-control" />
            <span asp-validation-for="EarlyDeparturePermission" class="text-danger"></span>
            </div> *@
            <div class="form-group" id="earlyAttendance">
                <label asp-for="Notes" class="control-label"></label>
                <input asp-for="Notes" class="form-control" />
                <span asp-validation-for="Notes" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
            <div class="form-group">
                <button id="OperPeriod" class="btn btn-primary">أضافة فترات</button>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const checkBox = document.getElementById("myCheckbox");
        const nFromTime = document.getElementById("nFromTime");
        const nToTime = document.getElementById("nToTime");
        const nhours = document.getElementById("nHours");
        const flexa = document.getElementById("flexbleCheckbox");
        const attendanceCheckbox = document.getElementById("AttendanceCheckbox");
        const earlyattendance = document.getElementById("earlyAttendance");
        const lateattendance = document.getElementById("lateAttendance");

        // Initial state (hide form if checkbox is unchecked)
        if (!checkBox.checked || !flexa.checked || !attendanceCheckbox.checked) {
            nFromTime.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
            nToTime.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
            nhours.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
            earlyattendance.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
            lateattendance.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
        }


        checkBox.addEventListener("change", function () {
            if (checkBox.checked) {
                nFromTime.style = `pointer-events:all ; filter: none; opacity: 1;`; // Hide form
                nToTime.style = `pointer-events: all; filter: none; opacity: 1;`; // Hide form
                nhours.style = `pointer-events: all; filter: none; opacity: 1;`; // Hide form


                flexa.checked = false;
                //============================================
            } else {
                nFromTime.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
                nToTime.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
                nhours.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form

            }
        });
        flexa.addEventListener("change", function () {
            if (flexa.checked) {
                nFromTime.style = `pointer-events:all ; filter: none; opacity: 1;`; // Hide form
                nToTime.style = `pointer-events: all; filter: none; opacity: 1;`; // Hide form
                nhours.style = `pointer-events: all; filter: none; opacity: 1;`; // Hide form

                checkBox.checked = false;
            } else {
                nFromTime.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
                nToTime.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
                nhours.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form

            }
        });
        attendanceCheckbox.addEventListener("change", function () {
            if (attendanceCheckbox.checked) {
                earlyattendance.style = `pointer-events:all ; filter: none; opacity: 1;`; // Hide form
                lateattendance.style = `pointer-events: all; filter: none; opacity: 1;`; // Hide form
            } else {
                earlyattendance.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
                lateattendance.style = `pointer-events: none; filter: none; opacity: .5;`; // Display form
            }
        });
        function calculateTime() {
            const startTimeInput = document.getElementById("nnFromTime");
            const endTimeInput = document.getElementById("nnToTime");
            const hoursInput = document.getElementById("nnHours");

            if (!startTimeInput || !endTimeInput || !hoursInput) {
                console.error("Missing input elements: startTime, endTime or hours");
                return;
            }

            const startTime = startTimeInput.value.trim();
            const endTime = endTimeInput.value.trim();

            if (!startTime || !endTime) {
                console.error("Please enter both start and end times");
                return;
            }


            // Validate time format (optional)
            // You can add a regular expression or a library to validate time format (HH:MM)

            // Parse string times into Date objects
            const startDate = new Date(`1970-01-01T${startTime}:00`);
            const endDate = new Date(`1970-01-02T${endTime}:00`);

            // Calculate time difference in milliseconds
            const timeDiff = endDate.getTime() - startDate.getTime();

            // Calculate hours and minutes
            const hours = Math.floor(timeDiff / (1000 * 60 * 60));
            const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
            if (minutes == 0) {
                hoursInput.value = hours;

            }
            else {
                // Update hours and minutes input fields
                hoursInput.value = (hours + ":" + minutes.toString().padStart(2, "0"));

            }

        }

        // Add event listener to a button or on change event of time inputs
        const calculateButton1 = document.getElementById("calculateButton");
        const startTimeInput1 = document.getElementById("nnFromTime");
        const endTimeInput1 = document.getElementById("nnToTime");

        if (calculateButton1) {
            calculateButton1.addEventListener("click", calculateTime);
        } else {
            startTimeInput1.addEventListener("change", calculateTime);
            endTimeInput1.addEventListener("change", calculateTime);
        }</script>
}
